# 🏴‍☠️ PostgreSQL Deployment לבוט התמימים הפיראטים
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: pirate-content-bot
  labels:
    app: postgres
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          fsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init
          optional: true
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: postgres
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
      storageClassName: "standard"

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: pirate-content-bot
  labels:
    app: postgres
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet

---
# PostgreSQL Init ConfigMap (אופציונלי)
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: pirate-content-bot
  labels:
    app: postgres
    app.kubernetes.io/component: init
data:
  init.sql: |
    -- יצירת extensionים נדרשים
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    -- יצירת אינדקסים בסיסיים
    -- (הטבלאות יווצרו על ידי האפליקציה)
    
    -- הגדרת זכויות נוספות למשתמש
    GRANT ALL PRIVILEGES ON DATABASE pirate_content TO pirate_user;
    
    -- הגדרות ביצועים
    ALTER DATABASE pirate_content SET timezone TO 'Asia/Jerusalem';