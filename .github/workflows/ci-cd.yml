name: CI/CD Pipeline - Pirate Content Bot

on:
  push:
    branches: [ "master" ]  # כל push ל-master יפעיל את ה-CI/CD
  pull_request:
    branches: [ "master" ]

env:
  DOCKER_IMAGE: dov121212/pirate-content-bot
  DOCKER_TAG: latest

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: pirate_content
          MYSQL_USER: pirate_user
          MYSQL_PASSWORD: pirate_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        cd pirate_content_bot
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set environment variables
      run: |
        echo "BOT_TOKEN=test_token_for_ci" >> $GITHUB_ENV
        echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "DB_PORT=3306" >> $GITHUB_ENV
        echo "DB_NAME=pirate_content" >> $GITHUB_ENV
        echo "DB_USER=pirate_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=pirate_pass" >> $GITHUB_ENV
        echo "REDIS_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV

    - name: Run migrations
      run: |
        cd pirate_content_bot
        PYTHONPATH=. python run_migrations.py

    - name: Run tests
      run: |
        cd pirate_content_bot
        PYTHONPATH=. python -m unittest discover -s tests
        python test_commands.py
        python test_analysis_fix.py

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Build Docker Image and Deploy
    if: success()  # רק אם הטסטים עברו

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./pirate_content_bot
        file: ./pirate_content_bot/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}


    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          echo "🚀 Starting deployment..."
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} || true
          docker stop pirate_content_bot || true
          docker rm pirate_content_bot || true
          docker run -d --name pirate_content_bot ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          echo "✅ Deployment completed!"
