name: CI/CD Pipeline - Pirate Content Bot

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  DOCKER_IMAGE: dovber/pirate-content-bot
  DOCKER_TAG: latest

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: pirate_content
          MYSQL_USER: pirate_user
          MYSQL_PASSWORD: pirate_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        cd pirate_content_bot
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database migrations
      run: |
        cd pirate_content_bot
        PYTHONPATH=. python run_migrations.py

    - name: Run tests
      run: |
        cd pirate_content_bot
        DB_HOST=127.0.0.1 PYTHONPATH=. python -m unittest discover -s tests

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    name: Build Docker Image and Deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./pirate_content_bot
        file: ./pirate_content_bot/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

    - name: Deploy to server
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          echo "üöÄ Starting deployment..."
          cd /home/dovber/pirate-content-bot/pirate_content_bot || exit 1
          docker-compose down || true
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          sed -i 's|image: .*pirate-bot.*|image: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}|g' docker-compose.yml || true
          docker-compose up -d
          sleep 10
          docker-compose ps
          docker image prune -f
          echo "‚úÖ Deployment completed successfully!"

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Deployment successful! Image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        exit 1
